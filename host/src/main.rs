// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    VERIFY_IT_ELF, VERIFY_IT_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt, Journal};
use hex::FromHex;
use std::time::Instant;
use clap::{
    Parser
};
#[derive(Parser)]
#[command(version, about, long_about = None)]
struct Cli {

    /// Path to proofs file for the hash example
    #[arg(short)]
    p: String,    
}

fn main() -> Result<(), Box<dyn std::error::Error>> {    
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    let args = Cli::parse();

    let hash_image_id = <[u8; 32]>::from_hex("26264f1dbc5febde01f009c7b06c10a06f14c85c2c2e4d411aaa72e9d8896ae0")?;    
    let proofs: Vec<Receipt> = bincode::deserialize(
        &std::fs::read(args.p)?
    )?;
    let journals: Vec<Journal> = proofs.iter()
        .map(|p| p.journal.clone())
        .collect();

    // let binding = ExecutorEnv::builder();
    let mut builder = ExecutorEnv::builder();
    builder
        .write(&hash_image_id)?
        .write(&journals)?;
    for p in proofs {
        builder.add_assumption(p);
    }
    let exec_env = builder.build()?;

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let now = Instant::now(); 
    let prove_info = prover
        .prove(exec_env, VERIFY_IT_ELF)
        .unwrap();
    let prove_dur = now.elapsed().as_secs();

    println!("Prove took `{prove_dur} seconds`.");
    println!("Session stats: {:?}", prove_info.stats);
    // extract the receipt.
    let receipt = prove_info.receipt;

    receipt
        .verify(VERIFY_IT_ID)?;

    let num_proofs: usize = receipt.journal.decode().unwrap();
    println!("Number of proofs verified: {}", num_proofs);

    Ok(())
}
