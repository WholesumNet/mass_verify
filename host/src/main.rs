// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    VERIFY_IT_ELF, VERIFY_IT_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv, SuccinctReceipt, ReceiptClaim};
use std::time::Instant;
use clap::{
    Parser
};
#[derive(Parser)]
#[command(version, about, long_about = None)]
struct Cli {

    /// Path to succinct proofs directoy for the hash example
    #[arg(short)]
    p: String,    
}

fn main() -> Result<(), Box<dyn std::error::Error>> {    
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    let args = Cli::parse();

    let mut proofs: Vec<SuccinctReceipt<ReceiptClaim>> = vec![];
    let mut claims: Vec<ReceiptClaim> = vec![];
    for entry in std::fs::read_dir(args.p)?{            
        let proof: SuccinctReceipt<ReceiptClaim> = bincode::deserialize(
            &std::fs::read(entry?.path())?            
        )?;
        claims.push(proof.claim.as_value()?.clone());
        proofs.push(proof);
    }
    
    // let binding = ExecutorEnv::builder();
    let mut builder = ExecutorEnv::builder();
    builder
        .write(&claims)?;
    for p in proofs {
        builder.add_assumption(p);
    }
    let exec_env = builder.build()?;

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let now = Instant::now(); 
    let prove_info = prover
        .prove(
            exec_env,
            VERIFY_IT_ELF
        )?;
    let prove_dur = now.elapsed().as_secs();

    println!("Prove took `{prove_dur} seconds`.");
    println!("Session stats: {:?}", prove_info.stats);
    // extract the receipt.
    let receipt = prove_info.receipt;

    receipt
        .verify(VERIFY_IT_ID)?;

    let num_proofs: usize = receipt.journal.decode().unwrap();
    println!("Number of proofs verified: {}", num_proofs);

    Ok(())
}
